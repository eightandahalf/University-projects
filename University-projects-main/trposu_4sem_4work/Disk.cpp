#include <iostream>
#include <string>
#include <vector>

#include "Names2.h"
#include "Random2.h"
#include "Disk.h" 

int Disk::foldersize(int i)
{
	return DI_folder_sizes[i];
}


std::string Disk::foldername(int i)
{
	return DI_folder_names[i];
}

std::string Disk::diskname()
{
	return DI_disk_name;
}

int Disk::fileamount(int i)
{
	return folders[i].fileamount();
}

std::vector<std::string> Disk::filenames(int i)
{
	return folders[i].file_names(); 
}

std::vector<std::string> Disk::filetypes(int i)
{
	return folders[i].file_types();
}

std::vector<int> Disk::filesizes(int i)
{
	return folders[i].file_sizes();
}

int Disk::DI_num_of_folder()
{
	return DI_folder_amount;
}

void Disk::DI_Print()
{
	std::cout << "|*********************************************|\n";
	std::cout << "| Disk name: " << DI_disk_name << "\t Disk size: " << DI_disk_size << "GB" << std::endl;
	for (int i = 0; i < DI_folder_amount; i++)
	{ 
		std::cout << "|---------------------------------------------|\n";
		std::cout << "| Folder name: " << DI_folder_names[i] << "\n| Folder size: " << DI_folder_sizes[i] << "GB\t\t\t      |" << std::endl;
	}
	std::cout << "|*********************************************|\n";
}

void Disk::DI_disk_printing()
{
	for (int i = 0; i < DI_folder_amount; i++)
	{
		folders[i].FO_Print();
	}
}

int folders_in_disk_totalmemory(std::vector<int>& FolderSizes) {
	int result = 0;
	for (int i = 0; i < FolderSizes.size(); i++)
	{
		result += FolderSizes[i];
	}
	return result;
}

Disk::Disk(std::string diskname, int disksize, int& disk_number, int& rand)
{
	std::random_device dev5; // Will be used to obtain a seed for the random number engine
	std::mt19937 rng5(dev5()); // Standard mersenne_twister_engine seeded with rd()

	int folder_size;
	std::string folder_name, folder_size_str;
	std::string temp_name;
	int temp_size, folder_size_restriction;

	DI_disk_name = diskname;
	DI_disk_size = disksize;
	
	if (disk_number != 0 && rand == 1)
	{
		std::cin.clear(); // after NOT 1 choice in FileExplorer.h
		std::cin.ignore(INT_MAX, '\n');
	}

	if (rand == 1) {
		std::cout << "\n\nHey! Enter, how many folders do you want in disk " << diskname << std::endl;

		while (!(std::cin >> DI_folder_amount))
		{
			std::cout << "Uncorrect input! Try again: " << std::endl;
			std::cin.clear();
			std::cin.ignore(INT_MAX, '\n');
		}

		folder_size_restriction = disksize / DI_folder_amount;

		for (int i = 1; i <= DI_folder_amount; i++)
		{
			std::cout << "Enter name of " << i << " folder: " << std::endl;
			std::cin >> folder_name;
			DI_folder_names.push_back(folder_name);
			folder_size_control(folder_size, folder_name, folder_size_restriction);
			DI_folder_sizes.push_back(folder_size);
		}
	}
	else
	{
		std::uniform_int_distribution<int> dist38(0, 37);
		std::uniform_int_distribution<int> dist37(0, 36);
		std::uniform_int_distribution<int> dist6(1, 6);
		DI_folder_amount = dist6(rng5);
		folder_size_restriction = disksize / DI_folder_amount;

		for (int i = 1; i <= DI_folder_amount; i++)
		{
		again: folder_name = FolderNames[dist38(rng2)]; // Use `dist26` to transform the random unsigned int generated by rng into an int in [0, 25]
			if (folder_repeat_control(folder_name, DI_folder_names) == 1) { goto again; };
			DI_folder_names.push_back(folder_name);
			folder_size_str = FolderSizes[dist37(rng2)];
			while (stoi(folder_size_str) > folder_size_restriction)
			{
				folder_size_str = FolderSizes[dist37(rng2)];
			}
			DI_folder_sizes.push_back(stoi(folder_size_str));
		}
		//std::cin.clear(); // after NOT 1 choice in FileExplorer.h
		//std::cin.ignore(INT_MAX, '\n');
	}

	DI_occup_memory = folders_in_disk_totalmemory(DI_folder_sizes);

	for (int i = 0; i < DI_folder_amount; i++) // creation of new folders like a objects
	{
		temp_name = DI_folder_names[i];
		temp_size = DI_folder_sizes[i];
		/*std::cout << "|*********************************************|" << std::endl;
		std::cout << "| Folder name: " << temp_name << "    |    Size: " << temp_size << "    |\n";
		std::cout << "|*********************************************|" << std::endl;*/
		folders.push_back(Folder(temp_name, temp_size, i, rand));
	}
}
